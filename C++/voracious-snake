## voracious-snake开发记录

### 1.类的设计及各类应该有的方法

#### ①Renderer - 渲染

- 需要将游戏中三元素投影到屏幕上，即蛇、食物、地图
- 先考虑使用最简单的控制台输出的方式，使用`vector<string>`保存信息
- 依次将蛇、食物、地图的信息存储到数组中，最后将数组打印即可

```cpp
//渲染思路：将信息存储到一个string类型的数组中，这个数组实际上是二维的，将数组打印出即可
void Renderer::render(const MapCtrl &map, const Snake snake, const Food &food) {
    //存储信息的二维数组
    std::vector<std::string> board(map.height,std::string(map.width,' '));

    //地图 - 加边框#
    for (int i = 0; i < map.width; ++i) {//上下边框
        board[0][i] = '#';
        board[map.height - 1][i] = '#';
    }
    for (int j = 0; j < map.height; ++j) {//左右边框
        board[j][0] = '#';
        board[j][map.width - 1] = '#';
    }

    //绘制蛇的位置
    for (int i = 0; i < snake.body.size(); ++i) {
        int x = snake.body[i].first;
        int y = snake.body[i].second;
        board[x][y] = (i == snake.body.size() - 1) ? 'O' : 'o';//蛇头用O，其余用o
    }
    //绘制食物的位置
    board[food.food_pos.first][food.food_pos.second] = '*';

    system("cls");//清屏

    //将数组打印出来即可
    for (auto i : board) {
        std::cout << i << endl;
    }
}
```

##### 衍生问题 - Snake和Food的初始位置

- 初始想法：随机生成
- 需要前期：将地图对象传给Snake和Food，使其了解地图尺寸，再在尺寸内随机生成（避免边界及边界外）

- 生成Food，先写出这个实现，至于调用时机：①游戏开始时；②Food被吃掉时

```cpp
Food(int height,int width) {generate_food(height,width);}//生成随机Food坐标	

void Food::generate_food(int width, int height) {
    //避免食物在边界（因为控制台下边界是#）
    int x = rand() % (height - 2) + 1;
    int y = rand() % (width - 2) + 1;
    this->food_pos = {x,y};
}
```

- 初始生成Snake

```cpp
Snake::Snake(int height, int width) {
    int x = height / 2;
    int y = width / 2;//在中央生成
    body.push_back({x,y - 2});
    body.push_back({x,y - 1});
    body.push_back({x,y});//蛇头
    corrent_dir = {0,1};
}
```

​	
